<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux基础]]></title>
    <url>%2F2018%2F09%2F16%2FLinux%E5%9F%BA%E7%A1%80%E4%B9%8BCentOS%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[CentOS Windows $&gt;ls cmd&gt;dir // $&gt;ls --help //查看命令帮助 $&gt;man ls //查看命令帮助 $&gt;clear cmd&gt;cls //清屏 $&gt;cd /home cmd&gt;cd d:/ //切换目录 $&gt;cd . cmd&gt;cd . //进入当前目录 $&gt;cd .. cmd&gt;cd .. //进入上级目录 $&gt;cd /home/centos cmd&gt;cd d:/xx/x/x //进入绝对路径 $&gt;pwd //显式当前目录 $&gt;whoami //显式当前用户名 $&gt;su root //切换用户,输入密码,swith user $&gt;passwd //修改当前用户的密码 $&gt;ifconfig cmd&gt;ipconfig //查看ip地址 $&gt;ping localhost cmd&gt;ping localhost //查看网络连通情况 $&gt;ping www.baidu.com cmd&gt;ping www.baidu.com //查看网络连通情况 $&gt;启动桌面版的网卡 on. $&gt;su centos // $&gt;cd /home/centos // $&gt;cd ~ //回到主目录 $&gt;cd - //回到上次的目录 $&gt;ll //别名,ls -l --autocolor... $&gt;alias //查看所有的别名 $&gt;ls -a -l -h //查看当前目录-h:人性化 -l:列表 -a:显式.开头 $&gt;mkdir ~/Downloads/a //创建目录 $&gt;touch ~/Downloads/a/1.txt //创建文件 $&gt;echo helloworld &gt; 1.txt //重定向输出(覆盖) $&gt;echo helloworld &gt;&gt; 1.txt //重定向输出(追加模式) $&gt;cat 1.txt cmd&gt;type a.txt //查看文件 $&gt;cp 1.txt 2.txt //复制文件 $&gt;rm 1.txt //删除文件 $&gt;rm -rf / //强行递归删除 $&gt;mv a.txt tmp/ //强行递归删除 [centos client中切换模式] ctrl + alt + f6 //切换到文本模式 ctrl + alt //切换鼠标 ctrl + alt + f1 //切换桌面模式. ctrl + alt + f5 //切换到新的文本模式 [nano文本编辑器,命令行模式] $&gt;nano a.txt //打开nano编辑器，编辑a.txt文件 $&gt;.... $&gt;ctrl + o //保存文件,提示后直接回车 $&gt;ctrl + x //退出文件 $&gt;ctrl + k //cut 文本 $&gt;ctrl + u //cut 文本 $&gt;more a.txt //分屏显式 q:退出 h:帮助 $&gt;more -5 a.txt //显式前5行内容 $&gt;tail a.txt //最后10行内容 $&gt;find . | more // | 是管道符，前面的命令的输出作为后面命令输入。 $&gt;find ~ $&gt;ls -aR ~ //递归显式主目录所有的文件.(a表示包含.开头的文件) $&gt;head a.txt //显式前10行 $&gt;head -n 10 a.txt //显式前10行 $&gt;head -10 a.txt //显式前10行 $&gt;tail a.txt $&gt;tail -n 20 a.txt $&gt;tail -20 a.txt $&gt;tail --lines=20 a.txt $&gt;wc -c -l -w a.txt //统计文本信息, //显式统计信息-c:字节 -l:line -w:word $&gt;hostname //查看主机名称 $&gt;uname -r //查看系统内核 $&gt;uname -a //查看系统内核 $&gt;uname -p //查看系统内核 $&gt;uname -m //查看系统内核 $&gt;file xxx.xx //查看文件类型 $&gt;gzip a.txt //原地压缩 $&gt;gzip -d a.txt //原地压缩 $&gt;gzip -dr tmp //递归操纵文件夹下的文件 $&gt;gunzip a.txt.gz //等价于gzip -d a.txt $&gt;tar -cvf my.tar 1.txt tmp //创建归档文件 $&gt;tar -vxf my.tar //解档文件 把多个文件保存到一个文件，也可以从归档文件恢复到单个文件 -c create创建 -f 归档文件名 -vf 列出所有文件在。。里面 -xf 从。。里面抽取所有文件。 —r 追加 -cf 创建 例子 tar -cf my.tar a.txt ：将a.txt归档压缩到my.tar tar -xvf my.tar a.txt: 抽取my.tar里面的a.txt tar -cf my.tar a.txt tmp/ :将a.txt和tmp/都压缩到my.tar里面 xargs 在&apos;xargs&apos;加单引号把他识别为一个命令。 $&gt;find . | grep txt | cp `xargs` temp //xargs是多行变单行，使用空格替换回车换行符. //`` : 是强制命令解析。 反引号’’问题 $&gt;ping `cat a.txt` //命令嵌套 $&gt;which echo //查看命令的文件路径]]></content>
      <tags>
        <tag>linux</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[京东实战项目之hive实战（1）]]></title>
    <url>%2F2018%2F09%2F14%2F%E4%BA%AC%E4%B8%9C%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E4%B9%8Bhive%E5%AE%9E%E6%88%98%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[先熟悉一下Hive的基本语句： 首先里面的库有这么几个表， desc formatted ods_order; 看到表有几个信息 可以看到表的字段的信息。 同时可以看见表的是否是分区表partition information Location:可以看见路径，数据是在哪里的。 table Type: 是否是内部表 可以通过Hive看到进入到dfs里面的路径 可以看见里面文件的大小 通过explain 来看他的hive是怎么走的，看他的执行计划。 观察一个表的分区信息： 查看hadoop正在运行的任务 yarn application -list show functions;//显示hive里所有函数desc function extended add_months//显示里面具体的函数的用法 有时候desc formatted ods_order;里面显示的路径可能会是假的路径。在hadoop搭建的时候配置出问题，就会出现假的路径。 通过命令 desc extended ods_order partition(dt=20151010); //通过这个命令可以找到库表的实际路径。其中的dt是通过 show partition ado_order;来找到的。 以前的0.1之前有些扫描数据的时候默认是不开启mapreduce的。在select的时候是不开启mapreduce的。如果是少量的数据可以直接扫描出来的。但是表的数据非常大，如果不主动开启reduce执行，那么需要手动执行。通过上图来操作。设置是否开启mapreduce来执行。]]></content>
      <tags>
        <tag>hive</tag>
        <tag>实战项目</tag>
        <tag>基本hive语句</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础学习笔记]]></title>
    <url>%2F2018%2F09%2F12%2FJava%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Java中的总结合集（1）]]></title>
    <url>%2F2018%2F09%2F12%2FJava%E4%B8%AD%E7%9A%84%E6%80%BB%E7%BB%93%E5%90%88%E9%9B%86%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[关于构造函数构造函数本身是没有返回值的。但是不能加void，一旦加了void就变成了一个函数。 public class sadf { public static void main(String[] args) { Cat cat = new Cat(); cat.cry(); } } abstract class Animal{ public String name; public abstract void cry(); public void Animal() { System.out.println(&quot;new Animal&quot;); } } class Cat extends Animal{ public void cry() { System.out.println(&quot;喵喵12345 &#125; &#125;这样的函数运行之后是 喵喵 因为Animal有void变成了一个函数。还有一个默认的空构造。 应该去掉void。 public class sadf { public static void main(String[] args) { Cat cat = new Cat(); cat.cry(); } } abstract class Animal{ public String name; public abstract void cry(); public Animal() { System.out.println(&quot;new Animal&quot;); } } class Cat extends Animal{ public void cry() { System.out.println(&quot;喵喵1234567 &#125; &#125;***结果是： new Animal 喵喵 关于抽象abstractclass ABSTACT { public static void main(String[] args) { JiaFeiCat j = new JiaFeiCat(); } } abstract class Animal { abstract void cry(); public Animal() { System.out.println(&quot;我是动物&quot;); } } abstract class Cat extends Animal { public Cat() { System.out.println(&quot;我是猫&quot;); } final void catchMouse() { System.out.println(&quot;猫能抓老鼠&quot;); } } final class JiaFeiCat extends Cat { public JiaFeiCat() { System.out.println(&quot;我是加菲猫&quot;); } @Override void cry() { System.out.println(&quot;加菲猫会哭&quot;); } } class BosiCat extends Cat { public BosiCat() { System.out.println(&quot;我叫波斯猫&quot;); } @Override void cry() { System.out.println(&quot;波斯猫会叫&quot;); } } 打印结果： 我是动物 我是猫 我是加菲猫 运行成功abstact抽象类方法可以在子类的子类中继承即可，不用一定在第一代子类中继承。]]></content>
      <tags>
        <tag>Java基础问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop权威指南学习笔记（1）——关于JS在Hadoop里面函数]]></title>
    <url>%2F2018%2F09%2F11%2FHadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[先看一段代码 package lianxi; import java.io.IOException; import org.apache.hadoop.io.IntWritable; import org.apache.hadoop.io.LongWritable; import org.apache.hadoop.io.Text; import org.apache.hadoop.mapred.MapReduceBase; import org.apache.hadoop.mapred.OutputCollector; import org.apache.hadoop.mapred.Reporter; import org.apache.hadoop.mapreduce.Mapper; import org.apache.hadoop.mapreduce.lib.map.WrappedMapper.Context; public class MaxTemperatureMapper extends MapReduceBase implements org.apache.hadoop.mapred.Mapper&lt;LongWritable, Text, Text, IntWritable&gt; { private static final int MISSING = 9999; public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException { String line = value.toString(); String year = line.substring(15, 19); int airTemperature; if (line.charAt(87) == &apos;+&apos;) {// parseInt doesn&apos;t like leading plus signs airTemperature = Integer.parseInt(line.substring(88, 92)); } else { airTemperature = Integer.parseInt(line.substring(87, 92)); } String quality = line.substring(92, 93); if (airTemperature != MISSING &amp;&amp; quality.matches(&quot;[01459]&quot;)) { context.write(new Text(year), new IntWritable(airTemperature)); } } @Override public void map(LongWritable arg0, Text arg1, OutputCollector&lt;Text, IntWritable&gt; arg2, Reporter arg3) throws IOException { // TODO Auto-generated method stub } } 这个里面的涉及到的JS的函数： toString:toString() 方法可把一个逻辑值转换为字符串，并返回结果。 substring:substring() 方法用于提取字符串中介于两个指定下标之间的字符。 语法stringObject.substring(start,stop)返回值一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 说明substring() 方法返回的子串包括 start 处的字符，但不包括 stop 处的字符。 如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。 chartAt:charAt() 方法可返回指定位置的字符。 请注意，JavaScript 并没有一种有别于字符串类型的字符数据类型，所以返回的字符是长度为 1 的字符串 语法stringObject.charAt(index) 注释：字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。 关于Integer 方法摘要 这里使用的函数是：paresInt(String int):将字符串参数作为有符号的十进制整数进行分析。 语法： parseInt(string, radix) parseInt(&quot;10&quot;); //返回 10 parseInt(&quot;19&quot;,10); //返回 19 (10+9) parseInt(&quot;11&quot;,2); //返回 3 (2+1) parseInt(&quot;17&quot;,8); //返回 15 (8+7) parseInt(&quot;1f&quot;,16); //返回 31 (16+15) parseInt(&quot;010&quot;); //未定：返回 10 或 8 matches() 方法用于检测字符串是否匹配给定的正则表达式。 调用此方法的 str.matches(regex) 形式与以下表达式产生的结果完全相同： 在字符串匹配给定的正则表达式时，返回 true。 public class Test { public static void main(String args[]) { String Str = new String(&quot;www.runoob.com&quot;); System.out.print(&quot;返回值 :&quot; ); System.out.println(Str.matches(&quot;(.*)runoob(.*)&quot;)); System.out.print(&quot;返回值 :&quot; ); System.out.println(Str.matches(&quot;(.*)google(.*)&quot;)); System.out.print(&quot;返回值 :&quot; ); System.out.println(Str.matches(&quot;www(.*)&quot;)); } } 以上程序执行结果为： 返回值 :true 返回值 :false 返回值 :true]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop权威指南</tag>
        <tag>MapReduce学习</tag>
        <tag>JS函数学习</tag>
      </tags>
  </entry>
</search>
