<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无心是一首歌</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://erichunn.github.io/"/>
  <updated>2018-09-16T12:28:02.574Z</updated>
  <id>http://erichunn.github.io/</id>
  
  <author>
    <name>Eric Hunn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础之文件类型-权限</title>
    <link href="http://erichunn.github.io/2018/09/16/Linux%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B-%E6%9D%83%E9%99%90/"/>
    <id>http://erichunn.github.io/2018/09/16/Linux基础之文件类型-权限/</id>
    <published>2018-09-16T10:47:50.000Z</published>
    <updated>2018-09-16T12:28:02.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录和权限"><a href="#目录和权限" class="headerlink" title="目录和权限"></a>目录和权限</h1><hr><pre><code>[windows]以磁盘分区物理结构作为文件系统结构</code></pre><p>每个用户在/home下面都有一个自己的家目录比如centos的家目录在<br>/home/centos但是root是管理员比较特殊root的目录在/root下<br>~是home的子一级</p><p><img src="https://i.imgur.com/9EibNGJ.png" alt="">‘</p><p>[centos]</p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构."></a>逻辑结构.</h2><pre><code>/                    //文件系统的根./bin                //最初的命令(祖先)，binary文件,可执行文件/sbin                //super binary(重要性高)/usr/bin            //厂商相关的命令,ubuntu/usr/sbin            //厂商相关的命令,ubuntu/usr/local/bin        //用户级别。/usr/local/sbin[Linux文件类型]-        //文件d        //目录l        //链接,类似于windows快捷方式.b        //block,块文件。c        //字符文件</code></pre><p><img src="https://i.imgur.com/YW7Kf85.png" alt=""></p><hr><p><img src="https://i.imgur.com/d1kfpNH.png" alt=""></p><p>第一个字母是L的意思是link连接类的。</p><hr><p><img src="https://i.imgur.com/vBRQgXA.png" alt=""></p><p>ifconfig的命令的目录在/sbin/ifconfig这里，但是实际上/sbin已经链接到了/usr/bin里面了。所以CentOS是没有bin和、usr/bin之分的，因为已经link过去了</p><hr><h2 id="linux的权限"><a href="#linux的权限" class="headerlink" title="[linux的权限]"></a>[linux的权限]</h2><p><img src="https://i.imgur.com/1ldCqdL.png" alt=""><br>一共有9个位，每个成分是从0-7如果是777就是全部权限都付给他了</p><p><img src="https://i.imgur.com/pgdqTkV.png" alt=""><br>看这段截图。里面的-rw-rw-r–<br>第一个-是文件类型第rw后面的-是代表0</p><pre><code>$&gt;chmod                //修改文件(夹)权限$&gt;chmod    g-w            //去除group中write权.chmod                //不受文件权限控制,只有owner和root才具有文件权限的修改权。【read权限】    文件    :文件内容    文件夹    :文件夹的内容    【write权限】------------【execute权限】-------------    文件    :执行    文件夹    :进入目录</code></pre><p>看下面这个例子：<br> <img src="https://i.imgur.com/U1ggRNv.png" alt=""><br>看最下面的这个chmode 644 a.txt</p><p>6是用户的成分。4是组的成分，最后4，是others的成分。<br>所以chmode 644最后是 -rw-r–r–</p><p><img src="https://i.imgur.com/XQSLfvz.png" alt=""></p><p>这里面的小细节格式 ：<br>    chmode 655 a.txt</p><pre><code>chmode g+w a.txt</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录和权限&quot;&gt;&lt;a href=&quot;#目录和权限&quot; class=&quot;headerlink&quot; title=&quot;目录和权限&quot;&gt;&lt;/a&gt;目录和权限&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;[windows]
以磁盘分区物理结构作为文件系统结构
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每
      
    
    </summary>
    
    
      <category term="Linux基础" scheme="http://erichunn.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
      <category term="文件类型权限" scheme="http://erichunn.github.io/tags/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://erichunn.github.io/2018/09/16/Linux%E5%9F%BA%E7%A1%80%E4%B9%8BCentOS%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80/"/>
    <id>http://erichunn.github.io/2018/09/16/Linux基础之CentOS命令基础/</id>
    <published>2018-09-16T02:02:53.000Z</published>
    <updated>2018-09-16T09:40:41.110Z</updated>
    
    <content type="html"><![CDATA[<pre><code>CentOS                        Windows$&gt;ls                        cmd&gt;dir                //$&gt;ls --help                                        //查看命令帮助$&gt;man ls                                        //查看命令帮助$&gt;clear                        cmd&gt;cls                //清屏$&gt;cd /home                    cmd&gt;cd d:/            //切换目录$&gt;cd .                        cmd&gt;cd .            //进入当前目录$&gt;cd ..                        cmd&gt;cd ..            //进入上级目录$&gt;cd /home/centos            cmd&gt;cd d:/xx/x/x    //进入绝对路径</code></pre><hr><pre><code>$&gt;pwd                                            //显式当前目录$&gt;whoami                                        //显式当前用户名$&gt;su root                                        //切换用户,输入密码,swith user$&gt;passwd                                        //修改当前用户的密码$&gt;ifconfig                    cmd&gt;ipconfig            //查看ip地址$&gt;ping localhost            cmd&gt;ping localhost        //查看网络连通情况$&gt;ping www.baidu.com        cmd&gt;ping www.baidu.com    //查看网络连通情况$&gt;启动桌面版的网卡    on.$&gt;su centos                                            //$&gt;cd /home/centos                                    //$&gt;cd ~                                                //回到主目录$&gt;cd -                                                //回到上次的目录$&gt;ll                                                //别名,ls -l --autocolor...$&gt;alias                                                //查看所有的别名$&gt;ls -a -l -h                                        //查看当前目录-h:人性化 -l:列表 -a:显式.开头$&gt;mkdir ~/Downloads/a                                //创建目录$&gt;touch ~/Downloads/a/1.txt                            //创建文件$&gt;echo helloworld &gt; 1.txt                            //重定向输出(覆盖)$&gt;echo helloworld &gt;&gt; 1.txt                            //重定向输出(追加模式)$&gt;cat 1.txt                    cmd&gt;type a.txt            //查看文件$&gt;cp 1.txt 2.txt                                    //复制文件$&gt;rm 1.txt                                            //删除文件$&gt;rm -rf /                                            //强行递归删除$&gt;mv a.txt tmp/                                        //强行递归删除[centos client中切换模式]ctrl + alt + f6                                        //切换到文本模式ctrl + alt                                            //切换鼠标ctrl + alt + f1                                        //切换桌面模式.ctrl + alt + f5                                        //切换到新的文本模式[nano文本编辑器,命令行模式]$&gt;nano a.txt                                        //打开nano编辑器，编辑a.txt文件$&gt;....$&gt;ctrl + o                                            //保存文件,提示后直接回车$&gt;ctrl + x                                            //退出文件$&gt;ctrl + k                                            //cut 文本$&gt;ctrl + u                                            //cut 文本$&gt;more a.txt                                        //分屏显式  q:退出  h:帮助$&gt;more -5 a.txt                                        //显式前5行内容$&gt;tail a.txt                                        //最后10行内容$&gt;find . | more                                        // | 是管道符，前面的命令的输出作为后面命令输入。$&gt;find ~                                            $&gt;ls -aR ~                                            //递归显式主目录所有的文件.(a表示包含.开头的文件)$&gt;head a.txt                                        //显式前10行$&gt;head -n 10 a.txt                                    //显式前10行$&gt;head -10 a.txt                                    //显式前10行$&gt;tail a.txt$&gt;tail -n 20 a.txt$&gt;tail -20 a.txt$&gt;tail --lines=20 a.txt$&gt;wc -c -l -w a.txt                                    //统计文本信息,                                                    //显式统计信息-c:字节 -l:line -w:word$&gt;hostname        //查看主机名称$&gt;uname -r        //查看系统内核$&gt;uname -a        //查看系统内核$&gt;uname -p        //查看系统内核$&gt;uname -m        //查看系统内核$&gt;file xxx.xx        //查看文件类型$&gt;gzip a.txt        //原地压缩$&gt;gzip -d a.txt        //原地压缩$&gt;gzip -dr tmp        //递归操纵文件夹下的文件$&gt;gunzip a.txt.gz    //等价于gzip -d a.txt$&gt;tar -cvf my.tar 1.txt tmp        //创建归档文件$&gt;tar -vxf my.tar                //解档文件</code></pre><p>把多个文件保存到一个文件，也可以从归档文件恢复到单个文件</p><pre><code>-c create创建-f 归档文件名-vf 列出所有文件在。。里面-xf 从。。里面抽取所有文件。—r 追加-cf 创建</code></pre><p>例子</p><pre><code>tar -cf my.tar a.txt ：将a.txt归档压缩到my.tartar -xvf my.tar a.txt: 抽取my.tar里面的a.txttar -cf my.tar a.txt tmp/ :将a.txt和tmp/都压缩到my.tar里面</code></pre><hr><p><img src="https://i.imgur.com/USxFESR.png" alt=""></p><p>xargs</p><pre><code>在&apos;xargs&apos;加单引号把他识别为一个命令。$&gt;find . | grep txt | cp `xargs` temp    //xargs是多行变单行，使用空格替换回车换行符.                                        //`` : 是强制命令解析。</code></pre><p><img src="https://i.imgur.com/DEbAcEb.png" alt=""></p><p>反引号’’问题</p><p><img src="https://i.imgur.com/lqhkxfD.png" alt=""></p><pre><code>$&gt;ping `cat a.txt`                        //命令嵌套</code></pre><p><img src="https://i.imgur.com/MLzjLoQ.png" alt=""></p><pre><code>$&gt;which echo                            //查看命令的文件路径</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;CentOS                        Windows
$&amp;gt;ls                        cmd&amp;gt;dir                //
$&amp;gt;ls --help                 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://erichunn.github.io/tags/linux/"/>
    
      <category term="基础" scheme="http://erichunn.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>京东实战项目之hive实战（1）</title>
    <link href="http://erichunn.github.io/2018/09/14/%E4%BA%AC%E4%B8%9C%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E4%B9%8Bhive%E5%AE%9E%E6%88%98%EF%BC%881%EF%BC%89/"/>
    <id>http://erichunn.github.io/2018/09/14/京东实战项目之hive实战（1）/</id>
    <published>2018-09-14T12:56:23.000Z</published>
    <updated>2018-09-14T13:29:47.288Z</updated>
    
    <content type="html"><![CDATA[<p>先熟悉一下Hive的基本语句：</p><p><img src="https://i.imgur.com/m3EGeNB.png" alt=""></p><p>首先里面的库有这么几个表，</p><pre><code>desc formatted ods_order;</code></pre><hr><p>看到表有几个信息</p><p><img src="https://i.imgur.com/QySpeml.png" alt=""></p><hr><p>可以看到表的字段的信息。</p><p><img src="https://i.imgur.com/LKLlYkH.png" alt=""></p><p>同时可以看见表的是否是分区表partition information</p><p>Location:可以看见路径，数据是在哪里的。</p><hr><p>table Type: 是否是内部表</p><hr><p><img src="https://i.imgur.com/xeLyY3a.png" alt=""><br>可以通过Hive看到进入到dfs里面的路径</p><hr><p><img src="https://i.imgur.com/xygHp2A.png" alt=""><br>可以看见里面文件的大小</p><hr><p>通过explain 来看他的hive是怎么走的，看他的执行计划。<br><img src="https://i.imgur.com/tSBmrzT.png" alt=""></p><hr><p>观察一个表的分区信息：</p><p><img src="https://i.imgur.com/aqBMFwV.png" alt=""></p><hr><p>查看hadoop正在运行的任务</p><pre><code>yarn application -list </code></pre><p><img src="https://i.imgur.com/MVAygd5.png" alt=""></p><p><img src="https://i.imgur.com/tFau3p3.png" alt=""></p><hr><p>show functions;//显示hive里所有函数<br>desc function extended add_months//显示里面具体的函数的用法</p><hr><p> 有时候desc formatted ods_order;里面显示的路径可能会是假的路径。在hadoop搭建的时候配置出问题，就会出现假的路径。</p><p>通过命令</p><pre><code>desc extended ods_order partition(dt=20151010);//通过这个命令可以找到库表的实际路径。其中的dt是通过show partition ado_order;来找到的。</code></pre><hr><p><img src="https://i.imgur.com/1dogCNC.png" alt=""></p><hr><p><img src="https://i.imgur.com/9UA2P7t.png" alt=""></p><hr><p><img src="https://i.imgur.com/hrtak5b.png" alt=""><br>以前的0.1之前有些扫描数据的时候默认是不开启mapreduce的。<br>在select的时候是不开启mapreduce的。如果是少量的数据可以直接扫描出来的。但是表的数据非常大，如果不主动开启reduce执行，那么需要手动执行。通过上图来操作。设置是否开启mapreduce来执行。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先熟悉一下Hive的基本语句：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/m3EGeNB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先里面的库有这么几个表，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;desc formatted ods_order;
&lt;
      
    
    </summary>
    
    
      <category term="hive" scheme="http://erichunn.github.io/tags/hive/"/>
    
      <category term="实战项目" scheme="http://erichunn.github.io/tags/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="基本hive语句" scheme="http://erichunn.github.io/tags/%E5%9F%BA%E6%9C%AChive%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习笔记</title>
    <link href="http://erichunn.github.io/2018/09/12/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://erichunn.github.io/2018/09/12/Java基础学习笔记/</id>
    <published>2018-09-12T15:01:24.000Z</published>
    <updated>2018-09-12T15:01:24.534Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中的总结合集（1）</title>
    <link href="http://erichunn.github.io/2018/09/12/Java%E4%B8%AD%E7%9A%84%E6%80%BB%E7%BB%93%E5%90%88%E9%9B%86%EF%BC%881%EF%BC%89/"/>
    <id>http://erichunn.github.io/2018/09/12/Java中的总结合集（1）/</id>
    <published>2018-09-12T13:31:06.000Z</published>
    <updated>2018-09-12T14:59:16.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于构造函数"><a href="#关于构造函数" class="headerlink" title="关于构造函数"></a>关于构造函数</h1><p>构造函数本身是没有返回值的。但是不能加void，一旦加了void就变成了一个函数。</p><pre><code>public class sadf {    public static void main(String[] args) {        Cat cat = new Cat();        cat.cry();    }}abstract class Animal{    public String name;    public abstract void cry();    public void Animal() {        System.out.println(&quot;new Animal&quot;);    }}class Cat extends Animal{     public void cry() {        System.out.println(&quot;喵喵<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">这样的函数运行之后是</span><br><span class="line"></span><br><span class="line">喵喵</span><br></pre></td></tr></table></figure></code></pre><p>因为Animal有void变成了一个函数。还有一个默认的空构造。</p><p>应该去掉void。</p><pre><code>public class sadf {    public static void main(String[] args) {        Cat cat = new Cat();        cat.cry();    }}abstract class Animal{    public String name;    public abstract void cry();    public Animal() {        System.out.println(&quot;new Animal&quot;);    }}class Cat extends Animal{     public void cry() {        System.out.println(&quot;喵喵<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">***</span><br><span class="line">结果是：</span><br><span class="line"></span><br><span class="line">new Animal</span><br><span class="line">喵喵</span><br></pre></td></tr></table></figure></code></pre><hr><h1 id="关于抽象abstract"><a href="#关于抽象abstract" class="headerlink" title="关于抽象abstract"></a>关于抽象abstract</h1><pre><code>class ABSTACT {    public static void main(String[] args) {        JiaFeiCat j = new JiaFeiCat();    }}abstract class Animal {    abstract void cry();    public Animal() {        System.out.println(&quot;我是动物&quot;);    }}abstract class Cat extends Animal {    public Cat() {        System.out.println(&quot;我是猫&quot;);    }    final void catchMouse() {        System.out.println(&quot;猫能抓老鼠&quot;);    }}final class JiaFeiCat extends Cat {    public JiaFeiCat() {        System.out.println(&quot;我是加菲猫&quot;);    }    @Override    void cry() {        System.out.println(&quot;加菲猫会哭&quot;);    }}class BosiCat extends Cat {    public BosiCat() {        System.out.println(&quot;我叫波斯猫&quot;);    }    @Override    void cry() {        System.out.println(&quot;波斯猫会叫&quot;);    }}</code></pre><p>打印结果：</p><pre><code>我是动物我是猫我是加菲猫</code></pre><p>运行成功<br>abstact抽象类方法可以在子类的子类中继承即可，不用一定在第一代子类中继承。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于构造函数&quot;&gt;&lt;a href=&quot;#关于构造函数&quot; class=&quot;headerlink&quot; title=&quot;关于构造函数&quot;&gt;&lt;/a&gt;关于构造函数&lt;/h1&gt;&lt;p&gt;构造函数本身是没有返回值的。但是不能加void，一旦加了void就变成了一个函数。&lt;/p&gt;
&lt;pre&gt;&lt;co
      
    
    </summary>
    
    
      <category term="Java基础问题" scheme="http://erichunn.github.io/tags/Java%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop权威指南学习笔记（1）——关于JS在Hadoop里面函数</title>
    <link href="http://erichunn.github.io/2018/09/11/Hadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://erichunn.github.io/2018/09/11/Hadoop权威指南学习笔记（1）/</id>
    <published>2018-09-11T01:25:39.000Z</published>
    <updated>2018-09-11T03:04:15.202Z</updated>
    
    <content type="html"><![CDATA[<p><strong>先看一段代码</strong></p><pre><code>package lianxi;import java.io.IOException;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapred.MapReduceBase;import org.apache.hadoop.mapred.OutputCollector;import org.apache.hadoop.mapred.Reporter;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.lib.map.WrappedMapper.Context;public class MaxTemperatureMapper extends MapReduceBase        implements org.apache.hadoop.mapred.Mapper&lt;LongWritable, Text, Text, IntWritable&gt; {    private static final int MISSING = 9999;    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {        String line = value.toString();        String year = line.substring(15, 19);        int airTemperature;        if (line.charAt(87) == &apos;+&apos;) {// parseInt doesn&apos;t like leading plus signs            airTemperature = Integer.parseInt(line.substring(88, 92));        } else {            airTemperature = Integer.parseInt(line.substring(87, 92));        }        String quality = line.substring(92, 93);        if (airTemperature != MISSING &amp;&amp; quality.matches(&quot;[01459]&quot;)) {            context.write(new Text(year), new IntWritable(airTemperature));        }    }    @Override    public void map(LongWritable arg0, Text arg1, OutputCollector&lt;Text, IntWritable&gt; arg2, Reporter arg3)            throws IOException {        // TODO Auto-generated method stub    }}</code></pre><h2 id="这个里面的涉及到的JS的函数："><a href="#这个里面的涉及到的JS的函数：" class="headerlink" title="这个里面的涉及到的JS的函数："></a>这个里面的涉及到的JS的函数：</h2><hr><p><strong><em>toString:toString()</em></strong> 方法可把一个逻辑值转换为字符串，并返回结果。</p><hr><p><strong><em>substring:substring()</em></strong> 方法用于提取字符串中介于两个指定下标之间的字符。</p><p><strong>语法</strong><br>stringObject.substring(start,stop)<br><strong>返回值</strong><br>一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。</p><p><strong>说明</strong><br>substring() 方法返回的子串包括 start 处的字符，但不包括 stop 处的字符。</p><p>如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。</p><hr><p><strong><em>chartAt</em></strong>:<br>charAt() 方法可返回指定位置的字符。</p><p>请注意，JavaScript 并没有一种有别于字符串类型的字符数据类型，所以返回的字符是长度为 1 的字符串</p><p><strong>语法</strong><br>stringObject.charAt(index)</p><p><strong>注释</strong>：字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。</p><hr><h3 id="关于Integer-方法摘要"><a href="#关于Integer-方法摘要" class="headerlink" title="关于Integer 方法摘要"></a>关于Integer 方法摘要</h3><p><img src="/2018/09/11/Hadoop权威指南学习笔记（1）/1.png" alt=""><br><img src="/2018/09/11/Hadoop权威指南学习笔记（1）/2.png" alt=""><br><img src="/2018/09/11/Hadoop权威指南学习笔记（1）/3.png" alt=""><br><img src="/2018/09/11/Hadoop权威指南学习笔记（1）/4.png" alt=""></p><p>这里使用的函数是：<strong><em>paresInt(String int)</em></strong>:将字符串参数作为有符号的十进制整数进行分析。</p><p>语法： parseInt(string, radix)</p><p><img src="/2018/09/11/Hadoop权威指南学习笔记（1）/5" alt=""></p><pre><code>parseInt(&quot;10&quot;);            //返回 10parseInt(&quot;19&quot;,10);        //返回 19 (10+9)parseInt(&quot;11&quot;,2);        //返回 3 (2+1)parseInt(&quot;17&quot;,8);        //返回 15 (8+7)parseInt(&quot;1f&quot;,16);        //返回 31 (16+15)parseInt(&quot;010&quot;);        //未定：返回 10 或 8</code></pre><hr><p><strong><em>matches()</em></strong> 方法用于检测字符串是否匹配给定的正则表达式。</p><p>调用此方法的 str.matches(regex) 形式与以下表达式产生的结果完全相同：</p><p>在字符串匹配给定的正则表达式时，返回 true。</p><pre><code>public class Test {    public static void main(String args[]) {        String Str = new String(&quot;www.runoob.com&quot;);        System.out.print(&quot;返回值 :&quot; );        System.out.println(Str.matches(&quot;(.*)runoob(.*)&quot;));        System.out.print(&quot;返回值 :&quot; );        System.out.println(Str.matches(&quot;(.*)google(.*)&quot;));        System.out.print(&quot;返回值 :&quot; );        System.out.println(Str.matches(&quot;www(.*)&quot;));    }}以上程序执行结果为：返回值 :true返回值 :false返回值 :true</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;先看一段代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package lianxi;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://erichunn.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop权威指南" scheme="http://erichunn.github.io/tags/Hadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    
      <category term="MapReduce学习" scheme="http://erichunn.github.io/tags/MapReduce%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JS函数学习" scheme="http://erichunn.github.io/tags/JS%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
